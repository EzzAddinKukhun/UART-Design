module Transmitter (tx_tick, tx_start, length, tx_data, parity_type, parity_en, stop2, rst, tx, tx_done);
  input tx_tick, parity_type, parity_en, stop2, rst, tx_start;
  input [1:0] length; 
  integer counter, onesCounter, stopTwoCounter = 0; 
  input [7:0] tx_data; 
  reg [2:0] currentState, nextState; 
  reg isStop, parity_bit; 
  output reg tx, tx_done;
  reg [4:0] b; 
  parameter IDLE = 3'b000, SEND = 3'b001, PARITY = 3'b010, STOP = 3'b011, DONE = 		3'b100; 
  
  always @ (stop2) begin
    if (stop2) stopTwoCounter = 2; 
    else stopTwoCounter = 1; 
  end 
  
  // calculate parity 
  always @ (parity_type) begin
    for (integer i=0 ; i < counter ; i++)begin
      if (tx_data[i] == 1'b1) onesCounter = onesCounter + 1;    
    end 
  
    if (onesCounter%2) begin
      parity_bit = parity_type ? 1'b1: 1'b0;  
    end
    else begin
      parity_bit = parity_type ? 1'b0: 1'b1; 
    end

    
  end 
  
  
  
  always @ (length) begin 
    case (length)  
      2'b00: counter <= 5; 
      2'b01: counter <= 6; 
      2'b10: counter <=7; 
      2'b11: counter <=8; 
      default: counter <=8; 
    endcase       
  end 
  
  //calculate next state 
  
  always @(currentState, tx_start, counter, stopTwoCounter)begin
    case (currentState)
      // IDLE STATE
      IDLE: begin
        if (tx_start == 1)  nextState = SEND;
        else nextState <= IDLE; 
      end 
      
      // SEND STATE
      SEND: begin
        if (!counter) begin
          if (parity_en) nextState <= PARITY; 
          else nextState <= STOP; 
        end 
        else nextState <= SEND; 
      end 
      
      // PARITY STATE
      PARITY: nextState <= STOP; 
      
      // STOP STATE
      STOP: begin
        if (stopTwoCounter == 0 ) nextState <= DONE; 
        else nextState <= STOP; 
      end
      
      DONE: nextState <= IDLE; 
      
    endcase 
  end
  
  always @ (posedge tx_tick, negedge rst) begin
    if (!rst) currentState <= IDLE;
    else currentState <= nextState; 
  end 
  
  always @ (posedge tx_tick)begin
    if (currentState == SEND) begin
      if (counter == 8 || counter == 7 || counter == 6 || counter == 5) begin
           b = tx_data;      
        end 
    end 
  end 
  
  always @ (posedge tx_tick) begin
    case (currentState)
      IDLE: tx <= 1; 
      SEND: begin  
        counter = counter - 1;
        if (counter >= 0) begin
          tx = b[0];
          $display("TX: %b", tx); 
          b = b >> 1; 
        end 
      end 
      
      PARITY: begin
        $display("IN PARITY: %b", parity_bit); 
         tx <= parity_bit;
        end
      
      STOP:begin
        stopTwoCounter = stopTwoCounter - 1; 
        if (stopTwoCounter >= 0) tx <= 1; 
      end 
      
      DONE: tx_done <= 1; 
       

    endcase 
  end 

endmodule  


